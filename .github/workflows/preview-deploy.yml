name: Build and Deploy Preview

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'slides/**'
  push:
    branches:
      - main
    paths:
      - 'slides/**'
  workflow_dispatch:
    inputs:
      rebuild_all:
        description: 'Rebuild all slides (normally only changed slides are built)'
        required: false
        default: false
        type: boolean

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-preview:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Marp CLI
        run: |
          npm install -g @marp-team/marp-cli
      
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi
      
      - name: Find changed slides
        id: changed
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get changed files in PR
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^slides/' || true)
          else
            # Get changed files in push - use different methods based on commit count
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              # Multiple commits exist, compare with previous
              CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD | grep '^slides/' || true)
            else
              # First commit or single commit, check all files in slides/
              CHANGED_FILES=$(git ls-tree -r --name-only HEAD | grep '^slides/' || true)
            fi
          fi
          
          # Extract unique slide directories
          SLIDE_DIRS=$(echo "$CHANGED_FILES" | sed 's|/[^/]*$||' | sort -u | grep '^slides/' || true)
          
          echo "Debug info:"
          echo "Event: ${{ github.event_name }}"
          echo "Changed files: $CHANGED_FILES"
          echo "Changed slide directories: $SLIDE_DIRS"
          
          # Save to output
          echo "dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$SLIDE_DIRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Build slides
        if: steps.changed.outputs.dirs != '' || github.event_name == 'workflow_dispatch'
        run: |
          # Create output directory
          mkdir -p build
          
          # Determine directories to build
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: build all slides
            DIRS_TO_BUILD=$(find slides -type d -name "20*" -maxdepth 1 2>/dev/null || true)
            echo "🔄 Manual trigger: Building all slides"
          else
            # Automatic: build only changed slides
            DIRS_TO_BUILD="${{ steps.changed.outputs.dirs }}"
            echo "⚡ Building only changed slides"
          fi
          
          # Process slide directories
          echo "$DIRS_TO_BUILD" | while read -r dir; do
            if [ -n "$dir" ] && [ -f "$dir/slide.md" ]; then
              echo "Building $dir..."
              echo "Current directory: $(pwd)"
              echo "Input file: $dir/slide.md"
              ls -la "$dir/"
              
              # Create output directory for this slide
              OUTPUT_DIR="build/$dir"
              mkdir -p "$OUTPUT_DIR"
              echo "Output directory: $OUTPUT_DIR"
              
              # Test Marp command first
              echo "Testing Marp CLI..."
              marp --version || echo "Marp CLI not found or error"
              
              # Check file exists and is readable
              if [ ! -f "$dir/slide.md" ]; then
                echo "Error: Slide file not found: $dir/slide.md"
                continue
              fi
              
              echo "File content check:"
              head -n 5 "$dir/slide.md"
              
              # Generate HTML only
              echo "Generating HTML..."
              marp "$dir/slide.md" --html --output "$OUTPUT_DIR/index.html"
              
              # Copy images if exists
              if [ -d "$dir/images" ]; then
                cp -r "$dir/images" "$OUTPUT_DIR/"
              fi
              
              # Copy to source directory for persistence
              cp -r "$OUTPUT_DIR"/* "$dir/output/" 2>/dev/null || mkdir -p "$dir/output" && cp -r "$OUTPUT_DIR"/* "$dir/output/"
              
              echo "✅ Built: $dir"
            fi
          done
      
      - name: Generate slides index page
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p build
          
          # Find all slide directories
          SLIDE_DIRS=$(find slides -type d -name "20*" -maxdepth 1 2>/dev/null | sort -r || true)
          
          # Generate index.html with slides list
          cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Marp Slides Generator - スライド一覧</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 1000px;
                margin: 0 auto;
                padding: 2rem;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .container {
                background: white;
                border-radius: 15px;
                padding: 3rem;
                box-shadow: 0 25px 50px rgba(0,0,0,0.15);
              }
              h1 { 
                color: #333; 
                text-align: center;
                margin-bottom: 2rem;
                font-size: 2.5rem;
              }
              .slides-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 2rem;
                margin: 2rem 0;
              }
              .slide-card {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 1.5rem;
                border-left: 4px solid #667eea;
                transition: all 0.3s ease;
              }
              .slide-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
              }
              .slide-title {
                font-size: 1.2rem;
                font-weight: 600;
                color: #333;
                margin-bottom: 0.5rem;
              }
              .slide-date {
                color: #666;
                font-size: 0.9rem;
                margin-bottom: 1rem;
              }
              .slide-links {
                display: flex;
                gap: 1rem;
              }
              .slide-links a {
                padding: 0.5rem 1rem;
                border-radius: 6px;
                text-decoration: none;
                font-weight: 500;
                transition: all 0.2s ease;
              }
              .html-link {
                background: #667eea;
                color: white;
              }
              .html-link:hover {
                background: #5a67d8;
              }
              .pdf-link {
                background: #e53e3e;
                color: white;
              }
              .pdf-link:hover {
                background: #c53030;
              }
              .no-slides {
                text-align: center;
                color: #666;
                margin: 2rem 0;
              }
              .create-guide {
                background: #e6fffa;
                border-radius: 10px;
                padding: 2rem;
                margin-top: 2rem;
                border-left: 4px solid #319795;
              }
              .create-guide h3 {
                color: #2d3748;
                margin-top: 0;
              }
              .create-guide ol li {
                margin: 0.5rem 0;
                color: #4a5568;
              }
              .footer {
                text-align: center;
                margin-top: 3rem;
                padding-top: 2rem;
                border-top: 1px solid #e2e8f0;
              }
              .footer a {
                color: #667eea;
                text-decoration: none;
                font-weight: 500;
              }
              .footer a:hover {
                text-decoration: underline;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>📊 Marp Slides Generator</h1>
          EOF
          
          # Add slides list or no-slides message
          if [ -n "$SLIDE_DIRS" ]; then
            echo '      <div class="slides-grid">' >> build/index.html
            
            for dir in $SLIDE_DIRS; do
              # Extract date and title from directory name
              BASENAME=$(basename "$dir")
              DATE_PART=$(echo "$BASENAME" | cut -d'-' -f1-3)
              TITLE_PART=$(echo "$BASENAME" | cut -d'-' -f4- | tr '-' ' ')
              
              # Format date
              YEAR=$(echo "$DATE_PART" | cut -d'-' -f1)
              MONTH=$(echo "$DATE_PART" | cut -d'-' -f2)
              DAY=$(echo "$DATE_PART" | cut -d'-' -f3)
              FORMATTED_DATE="$YEAR年${MONTH}月${DAY}日"
              
              # Check if built files exist
              HTML_EXISTS=""
              PDF_EXISTS=""
              if [ -f "build/$dir/index.html" ]; then
                HTML_EXISTS="true"
              fi
              if [ -f "build/$dir/slide.pdf" ]; then
                PDF_EXISTS="true"
              fi
              
              echo '        <div class="slide-card">' >> build/index.html
              echo "          <div class=\"slide-title\">$TITLE_PART</div>" >> build/index.html
              echo "          <div class=\"slide-date\">$FORMATTED_DATE</div>" >> build/index.html
              echo '          <div class="slide-links">' >> build/index.html
              
              if [ "$HTML_EXISTS" = "true" ]; then
                echo "            <a href=\"$dir/index.html\" class=\"html-link\">📄 HTML</a>" >> build/index.html
              fi
              if [ "$PDF_EXISTS" = "true" ]; then
                echo "            <a href=\"$dir/slide.pdf\" class=\"pdf-link\">📑 PDF</a>" >> build/index.html
              fi
              if [ -z "$HTML_EXISTS" ] && [ -z "$PDF_EXISTS" ]; then
                echo "            <span style=\"color: #999;\">ビルド待ち...</span>" >> build/index.html
              fi
              
              echo '          </div>' >> build/index.html
              echo '        </div>' >> build/index.html
            done
            
            echo '      </div>' >> build/index.html
          else
            cat >> build/index.html << 'EOF'
              <div class="no-slides">
                <p>📭 まだスライドがありません</p>
              </div>
          EOF
          fi
          
          # Add footer with creation guide
          cat >> build/index.html << 'EOF'
              
              <div class="create-guide">
                <h3>🚀 新しいスライドを作成する</h3>
                <ol>
                  <li><a href="https://github.com/Mutsumix/marp-slides-generator/issues/new/choose">📝 Issue を作成</a></li>
                  <li>フォームに必要事項を記入</li>
                  <li>AIでコンテンツを生成して貼り付け</li>
                  <li>@claude メンションで自動作成開始</li>
                  <li>Pull Request が自動生成されます</li>
                </ol>
              </div>
              
              <div class="footer">
                <p><a href="https://github.com/Mutsumix/marp-slides-generator">📁 GitHub リポジトリを見る</a></p>
              </div>
            </div>
          </body>
          </html>
          EOF
      
      - name: Setup Pages (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: Upload artifact (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build
      
      - name: Deploy to GitHub Pages (for main branch)
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Upload preview artifacts (for PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: slide-preview-${{ github.event.pull_request.number }}
          path: build/
          retention-days: 7
      
      - name: Comment PR with preview info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const changedDirs = `${{ steps.changed.outputs.dirs }}`.split('\n').filter(Boolean);
            
            if (changedDirs.length === 0) return;
            
            let comment = `## 📊 スライドプレビュー\n\n`;
            comment += `以下のスライドがビルドされました：\n\n`;
            
            for (const dir of changedDirs) {
              const slideName = dir.replace('slides/', '');
              const displayName = slideName.substring(11).replace(/-/g, ' '); // Remove date prefix and replace hyphens
              const dateStr = slideName.substring(0, 10);
              
              comment += `### 📁 ${displayName}\n`;
              comment += `**作成日:** ${dateStr}\n\n`;
              comment += `**マージ後のアクセス先:**\n`;
              comment += `- 📄 [HTMLスライド](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${dir}/)\n`;
              comment += `- 📑 [PDFダウンロード](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${dir}/slide.pdf)\n\n`;
              comment += `*プレビュー: アーティファクトからダウンロード可能*\n\n`;
              comment += `---\n\n`;
            }
            
            comment += `**📋 [全スライド一覧を見る](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)**\n\n`;
            comment += `*注: マージ後、上記リンクでアクセス可能になります*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 スライドプレビュー')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }