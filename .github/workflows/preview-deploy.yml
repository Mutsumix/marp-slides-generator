name: Build and Deploy Preview

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'slides/**'
  push:
    branches:
      - main
    paths:
      - 'slides/**'

jobs:
  build-preview:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Marp CLI
        run: |
          npm install -g @marp-team/marp-cli
      
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi
      
      - name: Find changed slides
        id: changed
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get changed files in PR
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^slides/' || true)
          else
            # Get changed files in push
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD | grep '^slides/' || true)
          fi
          
          # Extract unique slide directories
          SLIDE_DIRS=$(echo "$CHANGED_FILES" | sed 's|/[^/]*$||' | sort -u | grep '^slides/' || true)
          
          echo "Changed slide directories:"
          echo "$SLIDE_DIRS"
          
          # Save to output
          echo "dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$SLIDE_DIRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Build slides
        if: steps.changed.outputs.dirs != ''
        run: |
          # Create output directory
          mkdir -p build
          
          # Process each changed slide directory
          echo "${{ steps.changed.outputs.dirs }}" | while read -r dir; do
            if [ -n "$dir" ] && [ -f "$dir/slide.md" ]; then
              echo "Building $dir..."
              
              # Create output directory for this slide
              OUTPUT_DIR="build/$dir"
              mkdir -p "$OUTPUT_DIR"
              
              # Generate HTML with speaker notes
              marp "$dir/slide.md" \
                --html \
                --allow-local-files \
                --theme-set ./themes \
                -o "$OUTPUT_DIR/index.html"
              
              # Generate PDF
              marp "$dir/slide.md" \
                --pdf \
                --allow-local-files \
                --theme-set ./themes \
                -o "$OUTPUT_DIR/slide.pdf"
              
              # Copy images if exists
              if [ -d "$dir/images" ]; then
                cp -r "$dir/images" "$OUTPUT_DIR/"
              fi
              
              # Copy to source directory for persistence
              cp -r "$OUTPUT_DIR"/* "$dir/output/" 2>/dev/null || mkdir -p "$dir/output" && cp -r "$OUTPUT_DIR"/* "$dir/output/"
              
              echo "✅ Built: $dir"
            fi
          done
      
      - name: Ensure build directory with default content
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p build
          if [ ! -f build/index.html ]; then
            cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Marp Slides Generator</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 2rem;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .container {
                background: white;
                border-radius: 10px;
                padding: 2rem;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
              }
              h1 { color: #333; }
              p { color: #666; line-height: 1.6; }
              a { color: #667eea; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>📊 Marp Slides Generator</h1>
              <p>まだスライドがありません。</p>
              <p>スライドを作成するには：</p>
              <ol>
                <li><a href="https://github.com/Mutsumix/marp-slides-generator/issues/new/choose">Issue を作成</a></li>
                <li>フォームに必要事項を記入</li>
                <li>AIでコンテンツを生成して貼り付け</li>
                <li>自動的にPRが作成されます</li>
              </ol>
              <p><a href="https://github.com/Mutsumix/marp-slides-generator">→ リポジトリを見る</a></p>
            </div>
          </body>
          </html>
          EOF
          fi
      
      - name: Setup Pages (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: Upload artifact (for main branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build
      
      - name: Deploy to GitHub Pages (for main branch)
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Upload preview artifacts (for PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: slide-preview-${{ github.event.pull_request.number }}
          path: build/
          retention-days: 7
      
      - name: Comment PR with preview info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const changedDirs = `${{ steps.changed.outputs.dirs }}`.split('\n').filter(Boolean);
            
            if (changedDirs.length === 0) return;
            
            let comment = `## 📊 スライドプレビュー\n\n`;
            comment += `以下のスライドがビルドされました：\n\n`;
            
            for (const dir of changedDirs) {
              const slideName = dir.replace('slides/', '');
              comment += `### 📁 ${slideName}\n`;
              comment += `- 📄 HTMLプレビュー: アーティファクトからダウンロード可能\n`;
              comment += `- 📑 PDF: アーティファクトからダウンロード可能\n\n`;
            }
            
            comment += `---\n\n`;
            comment += `**マージ後のプレビューURL:**\n`;
            comment += `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\n\n`;
            comment += `*注: マージ後、GitHub Pagesで公開されます*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 スライドプレビュー')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }